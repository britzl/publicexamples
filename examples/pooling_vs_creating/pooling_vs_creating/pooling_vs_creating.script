local W = sys.get_config("display.width")
local H = sys.get_config("display.height")


local MAX_COUNT = 2500

local pool = {}

local active_pooled_count = 0
local active_created_count = 0
local is_active = false
local pooled_time = 0
local pooled_mem = 0
local created_time = 0
local created_mem = 0

local function random_position()
	return vmath.vector3(math.random(1, W), (H / 1) + math.random(1, H / 2), 0)
end

local function animate(id, position, callback)
	go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(position.x, 0, 0), go.EASING_OUTBOUNCE, 2, 0, callback)
end

local function spawn_pooled_go()
	local position = random_position()
	local id
	if #pool > 0 then
		id = pool[#pool]
		pool[#pool] = nil
		msg.post(id, "enable")
		go.set_position(position, id)
		is_active = false
	else
		id = factory.create("#factory", position)
	end
	active_pooled_count = active_pooled_count + 1
	animate(id, position, function()
		msg.post(id, "disable")
		pool[#pool + 1] = id
		active_pooled_count = active_pooled_count - 1
		is_active = false
	end)

end

local function spawn_created_go()
	local position = random_position()
	local id = factory.create("#factory", position)
	active_created_count = active_created_count + 1
	animate(id, position, function()
		go.delete(id)
		active_created_count = active_created_count - 1
		is_active = false
	end)

end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.count = 0
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local text = ("POOLED: %d (%.3fs %.2fkB) CREATED: %d (%.3fs %.2fkB)"):format(
		active_pooled_count,
		pooled_time,
		pooled_mem,
		active_created_count,
		created_time,
		created_mem)

	collectgarbage()
	msg.post("@render:", "draw_text", { text = text, position = vmath.vector3(20, 40, 0) } )
	msg.post("@render:", "draw_text", { text = "Click to spawn", position = vmath.vector3(20, 20, 0) } )
end

function on_input(self, action_id, action)
	if action.released and not is_active then
		self.count = self.count + 1
		if self.count % 2 == 1 then
			local mem = collectgarbage("count")
			local now = socket.gettime()
			for i=1,MAX_COUNT do
				spawn_created_go()
				is_active = true
			end
			created_time = socket.gettime() - now
			created_mem = collectgarbage("count") - mem
		else
			local mem = collectgarbage("count")
			local now = socket.gettime()
			for i=1,MAX_COUNT do
				spawn_pooled_go()
				is_active = true
			end
			pooled_time = socket.gettime() - now
			pooled_mem = collectgarbage("count") - mem
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
