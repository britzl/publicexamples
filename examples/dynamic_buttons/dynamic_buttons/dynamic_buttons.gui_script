local function play_sound(sound_url)
	msg.post(sound_url, "play_sound")
end

function init(self)

	-- metadata about the buttons we wish to show
	local button_data = {
		{
			text = "FOO",
			fn = function()
				print("closing door")
				play_sound(msg.url("/sounds#close_door"))
			end
		},
		{
			text = "BAR",
			fn = function()
				print("closing door")
				play_sound(msg.url("/sounds#footstep"))
			end
		},
	}

	-- generate button data for alphabet
	local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	for i=1,#alphabet do
		local letter = alphabet:sub(i,i)
		table.insert(button_data, { text = letter, fn = function() play_sound("dynamic_buttons:/sounds#" .. letter) end })
	end
	
	-- create all the buttons
	local button_proto = gui.get_node("button_proto/bg")
	self.buttons = {}
	for _,data in ipairs(button_data) do
		local nodes = gui.clone_tree(button_proto)
		-- arrange buttons in a grid, 10 buttons per row
		local x = #self.buttons % 10
		local y = math.floor(#self.buttons / 10)
		gui.set_position(nodes[hash("button_proto/bg")], vmath.vector3(100 + x * 60, 100 + y * 60, 0))
		gui.set_text(nodes[hash("button_proto/text")], data.text)

		-- store the button nodes and its associated data in a lua table for later lookup
		table.insert(self.buttons, { nodes = nodes, data = data })
	end
	
	-- disable the template node
	gui.set_enabled(button_proto, false)
	
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.4, 0.5, 0.7, 1.0) })
	msg.post("#", "acquire_input_focus")
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		-- find if a button was pressed and if so, run its function
		for _,button in pairs(self.buttons) do
			if gui.pick_node(button.nodes[hash("button_proto/bg")], action.x, action.y) then
				button.data.fn()
				return
			end
		end
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
